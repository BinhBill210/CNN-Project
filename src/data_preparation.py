"""
Script chia d·ªØ li·ªáu th√†nh train/val/test splits
"""
import os
import shutil
from pathlib import Path
import json
import random
from collections import defaultdict
import numpy as np
from sklearn.model_selection import train_test_split

# Seed cho reproducibility
RANDOM_SEED = 42
random.seed(RANDOM_SEED)
np.random.seed(RANDOM_SEED)

# C·∫•u h√¨nh
RAW_DATA_DIR = Path('data/raw')
PROCESSED_DATA_DIR = Path('data/processed')
TRAIN_RATIO = 0.70  # 70%
VAL_RATIO = 0.15    # 15%
TEST_RATIO = 0.15   # 15%

# Danh s√°ch 10 gi·ªëng ch√≥
BREED_NAMES = [
    'Beagle', 'Boxer', 'Bulldog', 'Dachshund', 'German_Shepherd',
    'Golden_Retriever', 'Labrador_Retriever', 'Poodle',
    'Rottweiler', 'Yorkshire_Terrier'
]


def check_data_integrity():
    """Ki·ªÉm tra t√≠nh to√†n v·∫πn c·ªßa d·ªØ li·ªáu g·ªëc"""
    print("="*60)
    print("KI·ªÇM TRA D·ªÆ LI·ªÜU G·ªêC")
    print("="*60 + "\n")
    
    total_images = 0
    breed_counts = {}
    
    for breed in BREED_NAMES:
        breed_path = RAW_DATA_DIR / breed
        
        if not breed_path.exists():
            print(f"‚ùå Thi·∫øu th∆∞ m·ª•c: {breed}")
            continue
        
        # ƒê·∫øm s·ªë ·∫£nh (jpg, jpeg, png)
        images = list(breed_path.glob('*.jpg')) + \
                 list(breed_path.glob('*.jpeg')) + \
                 list(breed_path.glob('*.png')) + \
                 list(breed_path.glob('*.JPG')) + \
                 list(breed_path.glob('*.JPEG'))
        
        count = len(images)
        breed_counts[breed] = count
        total_images += count
        
        status = "‚úÖ" if count == 100 else "‚ö†Ô∏è"
        print(f"{status} {breed:25s}: {count:3d} ·∫£nh")
    
    print(f"\n{'='*60}")
    print(f"T·ªîNG C·ªòNG: {total_images} ·∫£nh")
    print(f"TRUNG B√åNH: {total_images/len(BREED_NAMES):.1f} ·∫£nh/gi·ªëng")
    print(f"{'='*60}\n")
    
    return breed_counts, total_images


def get_all_images_with_labels():
    """L·∫•y t·∫•t c·∫£ ƒë∆∞·ªùng d·∫´n ·∫£nh v√† nh√£n"""
    all_images = []
    all_labels = []
    
    for label_idx, breed in enumerate(BREED_NAMES):
        breed_path = RAW_DATA_DIR / breed
        
        # L·∫•y t·∫•t c·∫£ ·∫£nh
        images = list(breed_path.glob('*.jpg')) + \
                 list(breed_path.glob('*.jpeg')) + \
                 list(breed_path.glob('*.png')) + \
                 list(breed_path.glob('*.JPG')) + \
                 list(breed_path.glob('*.JPEG'))
        
        for img_path in images:
            all_images.append(str(img_path))
            all_labels.append(label_idx)
    
    return np.array(all_images), np.array(all_labels)


def split_data(all_images, all_labels):
    """
    Chia d·ªØ li·ªáu th√†nh train/val/test v·ªõi stratification
    
    Returns:
        Dict ch·ª©a paths cho train, val, test
    """
    print("="*60)
    print("CHIA D·ªÆ LI·ªÜU")
    print("="*60 + "\n")
    
    # Chia train vs (val+test)
    train_imgs, temp_imgs, train_labels, temp_labels = train_test_split(
        all_images, all_labels,
        test_size=(VAL_RATIO + TEST_RATIO),
        stratify=all_labels,
        random_state=RANDOM_SEED
    )
    
    # Chia val vs test
    val_imgs, test_imgs, val_labels, test_labels = train_test_split(
        temp_imgs, temp_labels,
        test_size=TEST_RATIO / (VAL_RATIO + TEST_RATIO),
        stratify=temp_labels,
        random_state=RANDOM_SEED
    )
    
    # In th·ªëng k√™
    print(f"üì¶ Train set: {len(train_imgs)} ·∫£nh ({len(train_imgs)/len(all_images)*100:.1f}%)")
    print(f"üì¶ Val set:   {len(val_imgs)} ·∫£nh ({len(val_imgs)/len(all_images)*100:.1f}%)")
    print(f"üì¶ Test set:  {len(test_imgs)} ·∫£nh ({len(test_imgs)/len(all_images)*100:.1f}%)")
    
    # Ki·ªÉm tra ph√¢n b·ªë theo l·ªõp
    print(f"\n{'Breed':<25} {'Train':<8} {'Val':<8} {'Test':<8}")
    print("-"*60)
    
    for idx, breed in enumerate(BREED_NAMES):
        train_count = np.sum(train_labels == idx)
        val_count = np.sum(val_labels == idx)
        test_count = np.sum(test_labels == idx)
        print(f"{breed:<25} {train_count:<8} {val_count:<8} {test_count:<8}")
    
    return {
        'train': {'images': train_imgs, 'labels': train_labels},
        'val': {'images': val_imgs, 'labels': val_labels},
        'test': {'images': test_imgs, 'labels': test_labels}
    }


def copy_images_to_splits(splits_data):
    """Copy ·∫£nh t·ª´ raw sang th∆∞ m·ª•c train/val/test"""
    print(f"\n{'='*60}")
    print("COPY ·∫¢NH V√ÄO C√ÅC SPLITS")
    print("="*60 + "\n")
    
    # X√≥a th∆∞ m·ª•c processed c≈© n·∫øu c√≥
    if PROCESSED_DATA_DIR.exists():
        shutil.rmtree(PROCESSED_DATA_DIR)
        print(f"üóëÔ∏è  ƒê√£ x√≥a th∆∞ m·ª•c processed c≈©\n")
    
    # T·∫°o c·∫•u tr√∫c th∆∞ m·ª•c
    for split in ['train', 'val', 'test']:
        for breed in BREED_NAMES:
            split_dir = PROCESSED_DATA_DIR / split / breed
            split_dir.mkdir(parents=True, exist_ok=True)
    
    # Copy ·∫£nh
    for split_name, split_data in splits_data.items():
        print(f"üìÅ ƒêang copy {split_name} set...")
        
        for img_path, label in zip(split_data['images'], split_data['labels']):
            breed_name = BREED_NAMES[label]
            src_path = Path(img_path)
            dst_path = PROCESSED_DATA_DIR / split_name / breed_name / src_path.name
            
            shutil.copy2(src_path, dst_path)
        
        print(f"   ‚úÖ ƒê√£ copy {len(split_data['images'])} ·∫£nh")
    
    print(f"\n‚úÖ Copy ho√†n t·∫•t!\n")


def save_split_info(splits_data):
    """L∆∞u th√¥ng tin v·ªÅ splits ƒë·ªÉ reproducibility"""
    split_info = {
        'random_seed': RANDOM_SEED,
        'train_ratio': TRAIN_RATIO,
        'val_ratio': VAL_RATIO,
        'test_ratio': TEST_RATIO,
        'breed_names': BREED_NAMES,
        'splits': {}
    }
    
    for split_name, split_data in splits_data.items():
        split_info['splits'][split_name] = {
            'count': len(split_data['images']),
            'images': [str(Path(p).relative_to(RAW_DATA_DIR)) for p in split_data['images']],
            'labels': split_data['labels'].tolist()
        }
    
    save_path = Path('data/data_splits.json')
    with open(save_path, 'w') as f:
        json.dump(split_info, f, indent=2)
    
    print(f"üíæ ƒê√£ l∆∞u th√¥ng tin splits t·∫°i: {save_path}")


def verify_processed_data():
    """X√°c minh d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω"""
    print(f"\n{'='*60}")
    print("X√ÅC MINH D·ªÆ LI·ªÜU ƒê√É X·ª¨ L√ù")
    print("="*60 + "\n")
    
    for split in ['train', 'val', 'test']:
        split_dir = PROCESSED_DATA_DIR / split
        total = 0
        
        print(f"üìÇ {split.upper()} set:")
        for breed in BREED_NAMES:
            breed_dir = split_dir / breed
            count = len(list(breed_dir.glob('*.jpg')) + 
                       list(breed_dir.glob('*.jpeg')) + 
                       list(breed_dir.glob('*.png')))
            total += count
            print(f"   {breed:<25}: {count} ·∫£nh")
        
        print(f"   {'T·ªîNG':<25}: {total} ·∫£nh\n")


def main():
    """Main function"""
    print("\nüêï DOG BREED DATA PREPARATION\n")
    
    # 1. Ki·ªÉm tra d·ªØ li·ªáu g·ªëc
    breed_counts, total = check_data_integrity()
    
    if total == 0:
        print("‚ùå Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu! Ki·ªÉm tra l·∫°i th∆∞ m·ª•c data/raw/")
        return
    
    # 2. L·∫•y t·∫•t c·∫£ ·∫£nh v√† nh√£n
    print("üì• ƒêang load danh s√°ch ·∫£nh...")
    all_images, all_labels = get_all_images_with_labels()
    print(f"‚úÖ ƒê√£ load {len(all_images)} ·∫£nh\n")
    
    # 3. Chia d·ªØ li·ªáu
    splits_data = split_data(all_images, all_labels)
    
    # 4. Copy ·∫£nh v√†o c√°c splits
    copy_images_to_splits(splits_data)
    
    # 5. L∆∞u th√¥ng tin splits
    save_split_info(splits_data)
    
    # 6. X√°c minh
    verify_processed_data()
    
    print("="*60)
    print("‚úÖ DATA PREPARATION HO√ÄN T·∫§T!")
    print("="*60)
    print(f"\nüìÅ D·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω t·∫°i: {PROCESSED_DATA_DIR}")
    print(f"üìÑ Th√¥ng tin splits t·∫°i: data/data_splits.json\n")


if __name__ == '__main__':
    main()
